# Generated by Django 4.1.13 on 2024-06-07 12:13
from hashlib import md5

from django.db import migrations

from executor.workflows.utils.transform_old_to_new_protos import transform_old_entry_points_definition_to_new, \
    transform_old_action_definition_to_new, transform_old_schedule_definition_to_new


def transform_workflow_eps_actions(apps, schema_editor):
    WorkflowEntryPoint = apps.get_model("workflows", "WorkflowEntryPoint")

    for db_ep in WorkflowEntryPoint.objects.all():
        try:
            entry_point = db_ep.entry_point
            new_entry_point = transform_old_entry_points_definition_to_new(entry_point)
            ep_md5 = md5(str(new_entry_point).encode('utf-8')).hexdigest()
            db_ep.entry_point = new_entry_point
            db_ep.entry_point_md5 = ep_md5
            db_ep.save()
        except Exception as e:
            print(f"Failed to transform entry point {db_ep.id} with error: {str(e)}")

    WorkflowAction = apps.get_model("workflows", "WorkflowAction")
    for db_action in WorkflowAction.objects.all():
        try:
            action = db_action.action
            new_action = transform_old_action_definition_to_new(action)
            action_type = new_action.get('type')
            if action_type == 'SLACK_THREAD_REPLY':
                db_action.action_type = 3
            elif action_type == 'SLACK_MESSAGE':
                db_action.action_type = 2
            action_md5 = md5(str(new_action).encode('utf-8')).hexdigest()
            db_action.action = new_action
            db_action.action_md5 = action_md5
            db_action.save()
        except Exception as e:
            print(f"Failed to transform action {db_action.id} with error: {str(e)}")

    Workflow = apps.get_model("workflows", "Workflow")
    for db_workflow in Workflow.objects.all():
        try:
            schedule = db_workflow.schedule
            new_schedule = transform_old_schedule_definition_to_new(schedule)
            schedule_type = new_schedule.get('type')
            if schedule_type == 'INTERVAL':
                db_workflow.schedule_type = 2
            elif schedule_type == 'CRON':
                db_workflow.schedule_type = 3
            db_workflow.schedule = new_schedule
            db_workflow.save()
        except Exception as e:
            print(f"Failed to transform workflow {db_workflow.id} with error: {str(e)}")


class Migration(migrations.Migration):
    dependencies = [
        ('workflows', '0007_remove_workflowexecution_interval_and_more'),
    ]

    operations = [
        migrations.RunPython(transform_workflow_eps_actions, migrations.RunPython.noop)
    ]
