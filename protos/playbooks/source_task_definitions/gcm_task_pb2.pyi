"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.wrappers_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class Gcm(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _TaskType:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _TaskTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Gcm._TaskType.ValueType], builtins.type):  # noqa: F821
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        UNKNOWN: Gcm._TaskType.ValueType  # 0
        FILTER_LOG_ENTRIES: Gcm._TaskType.ValueType  # 1
        RUN_MQL_QUERY: Gcm._TaskType.ValueType  # 2

    class TaskType(_TaskType, metaclass=_TaskTypeEnumTypeWrapper): ...
    UNKNOWN: Gcm.TaskType.ValueType  # 0
    FILTER_LOG_ENTRIES: Gcm.TaskType.ValueType  # 1
    RUN_MQL_QUERY: Gcm.TaskType.ValueType  # 2

    @typing_extensions.final
    class FilterLogEntries(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        PROJECT_ID_FIELD_NUMBER: builtins.int
        LOG_NAME_FIELD_NUMBER: builtins.int
        FILTER_QUERY_FIELD_NUMBER: builtins.int
        @property
        def project_id(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        @property
        def log_name(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        @property
        def filter_query(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        def __init__(
            self,
            *,
            project_id: google.protobuf.wrappers_pb2.StringValue | None = ...,
            log_name: google.protobuf.wrappers_pb2.StringValue | None = ...,
            filter_query: google.protobuf.wrappers_pb2.StringValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["filter_query", b"filter_query", "log_name", b"log_name", "project_id", b"project_id"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["filter_query", b"filter_query", "log_name", b"log_name", "project_id", b"project_id"]) -> None: ...

    @typing_extensions.final
    class RunMqlQuery(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        PROJECT_ID_FIELD_NUMBER: builtins.int
        QUERY_FIELD_NUMBER: builtins.int
        PROCESS_FUNCTION_FIELD_NUMBER: builtins.int
        @property
        def project_id(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        @property
        def query(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        @property
        def process_function(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        def __init__(
            self,
            *,
            project_id: google.protobuf.wrappers_pb2.StringValue | None = ...,
            query: google.protobuf.wrappers_pb2.StringValue | None = ...,
            process_function: google.protobuf.wrappers_pb2.StringValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["process_function", b"process_function", "project_id", b"project_id", "query", b"query"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["process_function", b"process_function", "project_id", b"project_id", "query", b"query"]) -> None: ...

    TYPE_FIELD_NUMBER: builtins.int
    FILTER_LOG_ENTRIES_FIELD_NUMBER: builtins.int
    RUN_MQL_QUERY_FIELD_NUMBER: builtins.int
    type: global___Gcm.TaskType.ValueType
    @property
    def filter_log_entries(self) -> global___Gcm.FilterLogEntries: ...
    @property
    def run_mql_query(self) -> global___Gcm.RunMqlQuery: ...
    def __init__(
        self,
        *,
        type: global___Gcm.TaskType.ValueType = ...,
        filter_log_entries: global___Gcm.FilterLogEntries | None = ...,
        run_mql_query: global___Gcm.RunMqlQuery | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["filter_log_entries", b"filter_log_entries", "run_mql_query", b"run_mql_query", "task", b"task"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["filter_log_entries", b"filter_log_entries", "run_mql_query", b"run_mql_query", "task", b"task", "type", b"type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["task", b"task"]) -> typing_extensions.Literal["filter_log_entries", "run_mql_query"] | None: ...

global___Gcm = Gcm
