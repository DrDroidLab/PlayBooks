"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.wrappers_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class Jira(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _TaskType:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _TaskTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Jira._TaskType.ValueType], builtins.type):  # noqa: F821
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        UNKNOWN: Jira._TaskType.ValueType  # 0
        CREATE_TICKET: Jira._TaskType.ValueType  # 1
        ASSIGN_TICKET: Jira._TaskType.ValueType  # 2
        GET_USERS: Jira._TaskType.ValueType  # 3
        GET_TICKET: Jira._TaskType.ValueType  # 4
        SEARCH_TICKETS: Jira._TaskType.ValueType  # 5

    class TaskType(_TaskType, metaclass=_TaskTypeEnumTypeWrapper): ...
    UNKNOWN: Jira.TaskType.ValueType  # 0
    CREATE_TICKET: Jira.TaskType.ValueType  # 1
    ASSIGN_TICKET: Jira.TaskType.ValueType  # 2
    GET_USERS: Jira.TaskType.ValueType  # 3
    GET_TICKET: Jira.TaskType.ValueType  # 4
    SEARCH_TICKETS: Jira.TaskType.ValueType  # 5

    @typing_extensions.final
    class CreateTicket(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        PROJECT_KEY_FIELD_NUMBER: builtins.int
        SUMMARY_FIELD_NUMBER: builtins.int
        DESCRIPTION_FIELD_NUMBER: builtins.int
        ISSUE_TYPE_FIELD_NUMBER: builtins.int
        PRIORITY_FIELD_NUMBER: builtins.int
        LABELS_FIELD_NUMBER: builtins.int
        @property
        def project_key(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        @property
        def summary(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        @property
        def description(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        @property
        def issue_type(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        @property
        def priority(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        @property
        def labels(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        def __init__(
            self,
            *,
            project_key: google.protobuf.wrappers_pb2.StringValue | None = ...,
            summary: google.protobuf.wrappers_pb2.StringValue | None = ...,
            description: google.protobuf.wrappers_pb2.StringValue | None = ...,
            issue_type: google.protobuf.wrappers_pb2.StringValue | None = ...,
            priority: google.protobuf.wrappers_pb2.StringValue | None = ...,
            labels: google.protobuf.wrappers_pb2.StringValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["_issue_type", b"_issue_type", "_labels", b"_labels", "_priority", b"_priority", "description", b"description", "issue_type", b"issue_type", "labels", b"labels", "priority", b"priority", "project_key", b"project_key", "summary", b"summary"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["_issue_type", b"_issue_type", "_labels", b"_labels", "_priority", b"_priority", "description", b"description", "issue_type", b"issue_type", "labels", b"labels", "priority", b"priority", "project_key", b"project_key", "summary", b"summary"]) -> None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["_issue_type", b"_issue_type"]) -> typing_extensions.Literal["issue_type"] | None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["_labels", b"_labels"]) -> typing_extensions.Literal["labels"] | None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["_priority", b"_priority"]) -> typing_extensions.Literal["priority"] | None: ...

    @typing_extensions.final
    class AssignTicket(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        TICKET_KEY_FIELD_NUMBER: builtins.int
        ASSIGNEE_FIELD_NUMBER: builtins.int
        @property
        def ticket_key(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        @property
        def assignee(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        def __init__(
            self,
            *,
            ticket_key: google.protobuf.wrappers_pb2.StringValue | None = ...,
            assignee: google.protobuf.wrappers_pb2.StringValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["assignee", b"assignee", "ticket_key", b"ticket_key"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["assignee", b"assignee", "ticket_key", b"ticket_key"]) -> None: ...

    @typing_extensions.final
    class GetUsers(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        QUERY_FIELD_NUMBER: builtins.int
        @property
        def query(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        def __init__(
            self,
            *,
            query: google.protobuf.wrappers_pb2.StringValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["query", b"query"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["query", b"query"]) -> None: ...

    @typing_extensions.final
    class GetTicket(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        TICKET_KEY_FIELD_NUMBER: builtins.int
        @property
        def ticket_key(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        def __init__(
            self,
            *,
            ticket_key: google.protobuf.wrappers_pb2.StringValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["ticket_key", b"ticket_key"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["ticket_key", b"ticket_key"]) -> None: ...

    @typing_extensions.final
    class SearchTickets(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        QUERY_FIELD_NUMBER: builtins.int
        @property
        def query(self) -> google.protobuf.wrappers_pb2.StringValue: ...
        def __init__(
            self,
            *,
            query: google.protobuf.wrappers_pb2.StringValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["query", b"query"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["query", b"query"]) -> None: ...

    TYPE_FIELD_NUMBER: builtins.int
    CREATE_TICKET_FIELD_NUMBER: builtins.int
    ASSIGN_TICKET_FIELD_NUMBER: builtins.int
    GET_USERS_FIELD_NUMBER: builtins.int
    GET_TICKET_FIELD_NUMBER: builtins.int
    SEARCH_TICKETS_FIELD_NUMBER: builtins.int
    type: global___Jira.TaskType.ValueType
    @property
    def create_ticket(self) -> global___Jira.CreateTicket: ...
    @property
    def assign_ticket(self) -> global___Jira.AssignTicket: ...
    @property
    def get_users(self) -> global___Jira.GetUsers: ...
    @property
    def get_ticket(self) -> global___Jira.GetTicket: ...
    @property
    def search_tickets(self) -> global___Jira.SearchTickets: ...
    def __init__(
        self,
        *,
        type: global___Jira.TaskType.ValueType = ...,
        create_ticket: global___Jira.CreateTicket | None = ...,
        assign_ticket: global___Jira.AssignTicket | None = ...,
        get_users: global___Jira.GetUsers | None = ...,
        get_ticket: global___Jira.GetTicket | None = ...,
        search_tickets: global___Jira.SearchTickets | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["assign_ticket", b"assign_ticket", "create_ticket", b"create_ticket", "get_ticket", b"get_ticket", "get_users", b"get_users", "search_tickets", b"search_tickets", "task", b"task"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["assign_ticket", b"assign_ticket", "create_ticket", b"create_ticket", "get_ticket", b"get_ticket", "get_users", b"get_users", "search_tickets", b"search_tickets", "task", b"task", "type", b"type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["task", b"task"]) -> typing_extensions.Literal["create_ticket", "assign_ticket", "get_users", "get_ticket", "search_tickets"] | None: ...

global___Jira = Jira
